import pytest
from curvepy.de_caes import de_caes
import numpy as np

cases = [

    ([[0, 0, 8, 4], [0, 2, 2, 0]], [[0.0], [0.0]], 0.0)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[0.2688614540466392], [0.5925925925925926]], 0.1111111111111111)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[0.9657064471879285], [1.037037037037037]], 0.2222222222222222)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[1.925925925925926], [1.3333333333333335]], 0.3333333333333333)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[2.9849108367626886], [1.4814814814814814]], 0.4444444444444444)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[3.9780521262002746], [1.4814814814814814]], 0.5555555555555556)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[4.7407407407407405], [1.3333333333333335]], 0.6666666666666666)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[5.108367626886145], [1.0370370370370374]], 0.7777777777777777)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[4.916323731138546], [0.5925925925925928]], 0.8888888888888888)
    , ([[0, 0, 8, 4], [0, 2, 2, 0]], [[4.0], [0.0]], 1.0)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.0], [0.0]], 0.0)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.1111111111111111], [0.19753086419753085]], 0.1111111111111111)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.2222222222222222], [0.345679012345679]], 0.2222222222222222)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.33333333333333337], [0.4444444444444445]], 0.3333333333333333)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.4444444444444444], [0.49382716049382713]], 0.4444444444444444)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.5555555555555556], [0.49382716049382713]], 0.5555555555555556)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.6666666666666666], [0.4444444444444445]], 0.6666666666666666)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.7777777777777777], [0.3456790123456791]], 0.7777777777777777)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[0.8888888888888888], [0.19753086419753094]], 0.8888888888888888)
    , ([[0.0, 0.5, 1.0], [0.0, 1.0, 0.0]], [[1.0], [0.0]], 1.0)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[-4.0], [3.0]], 0.0)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[-1.5294924554183813], [3.809632677945435]], 0.1111111111111111)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[0.641975308641975], [4.442463039170859]], 0.2222222222222222)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[2.6296296296296293], [4.876543209876544]], 0.3333333333333333)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[4.5157750342935525], [5.097241274196007]], 0.4444444444444444)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[6.3497942386831285], [5.097241274196007]], 0.5555555555555556)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[8.148148148148149], [4.876543209876544]], 0.6666666666666666)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[9.894375857338817], [4.442463039170859]], 0.7777777777777777)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[11.539094650205762], [3.8096326779454355]], 0.8888888888888888)
    , ([[-4, 2, 5, 10, 13], [3, 5, 6, 5, 3]], [[13.0], [3.0]], 1.0)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-23.0], [-3.0]], 0.0)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-21.506729815727414], [-4.72844022196255]],
       0.1111111111111111)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-19.778622650491776], [-5.728084585118575]],
       0.2222222222222222)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-17.912208504801104], [-5.995884773662554]],
       0.3333333333333333)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-15.970598805888145], [-5.763851490569979]],
       0.4444444444444444)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-13.992292653370741], [-5.360864141080572]],
       0.5555555555555556)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-11.998628257887521], [-5.106995884773664]],
       0.6666666666666666)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-9.999879572708918], [-5.2403540562357795]],
       0.7777777777777777)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-7.999998118323578], [-5.8764359543204225]],
       0.8888888888888888)
    , ([[-23, -21, -18, -15, -12, -9, -6], [-3, -6, -8, -5, -4, -5, -7]], [[-6.0], [-7.0]], 1.0)]


@pytest.mark.parametrize('m, res, t', cases)
def test_parametrized_for_mult(m, res, t):
    res = de_caes(np.array(m), t)
    assert all(res == [list(res[0]), list(res[1])])
